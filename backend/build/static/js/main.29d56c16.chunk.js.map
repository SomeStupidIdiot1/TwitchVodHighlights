{"version":3,"sources":["services/vod.js","components/LookUp.js","components/DownloadVod.js","components/DownloadChat.js","components/GetHighlights.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["getVodInfo","id","a","axios","get","data","Error","getQualities","getVods","post","downloadMetadata","metadata","length","downloadSimpleChat","downloadChatJson","getHighlights","useStyles","makeStyles","theme","vods","backgroundColor","palette","background","paper","description","marginTop","spacing","marginBottom","errs","downloadButton","marginRight","textField","LookUp","pastVodData","JSON","parse","window","localStorage","getItem","classes","React","useState","urls","setUrls","vodData","setVodData","setErrs","Array","fill","checked","setChecked","inProgress","setInProgress","Container","maxWidth","CssBaseline","Grid","container","item","xs","Typography","variant","component","className","TextField","multiline","rowsMax","rows","color","label","fullWidth","onChange","e","target","value","Button","onClick","newVodData","newErrs","Set","split","map","url","trim","isNaN","splitItem","push","filter","forEach","catch","message","Promise","all","then","filteredData","concat","Object","removedDuplicates","i","hasDuplicate","j","_id","setItem","stringify","CircularProgress","List","ListItem","ListItemText","primary","button","key","currentIndex","indexOf","newChecked","splice","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","channel","display_name","title","actualMetadata","val","msg","displayVodInfo","margin","padding","timePicker","cursor","listItem","timeDisplay","width","info","main","buttonTimeChange","instructionsButton","instructions","marginLeft","DownloadVod","oldVodInfo","defaultVodInfo","vodId","author","timeSelected","showInstructions","filenames","allTimes","qualities","selectedQuality","setUrl","vodInfo","setVodInfo","err","setErr","handleKeyPress","newValue","currValue","intValue","parseInt","copy","copy2","newInfo","handleDelete","index","allTimesCopy","fileCopy","finally","FormControl","Select","labelId","event","name","MenuItem","FormHelperText","_","IconButton","fontSize","subIndex","Fragment","onKeyDown","onFocus","onBlur","times","timeArr","startTime","endTime","filename","replace","quality","Snackbar","open","onClose","Alert","severity","DownloadChat","getId","downloadJson","GetHighlights","setData","result","topSpeeds","Table","TableHead","TableRow","TableCell","TableBody","speed","hours","time","minutes","seconds","createMuiTheme","type","default","secondary","error","App","currTab","setCurrTab","ThemeProvider","AppBar","position","Tabs","Tab","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.29d56c16.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const getVodInfo = async (id) => {\r\n  try {\r\n    return (await axios.get(`/vod/vodinfo/${id}`)).data;\r\n  } catch (err) {\r\n    throw new Error(`Could not get twitch.tv/videos/${id}`);\r\n  }\r\n};\r\n\r\nexport const getQualities = async (id) => {\r\n  try {\r\n    return (await axios.get(`/vod/vodqualities/${id}`)).data;\r\n  } catch (err) {\r\n    throw new Error(`Could not get twitch.tv/videos/${id}`);\r\n  }\r\n};\r\nexport const getVods = async (data) => {\r\n  // data: {quality: ???, id: ??? clips: [{startTime, endTime, filename}]}\r\n  try {\r\n    await axios.post(`/vod/voddownload`, data);\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\nexport const downloadMetadata = async (metadata) => {\r\n  try {\r\n    if (metadata.length) await axios.post(`/jsondownload`, metadata);\r\n  } catch (err) {\r\n    throw new Error(`Could not download metadata`);\r\n  }\r\n};\r\nexport const downloadSimpleChat = async (id) => {\r\n  try {\r\n    return (await axios.get(`/vod/simplechat/${id}`)).data;\r\n  } catch (err) {\r\n    throw new Error(`Could not get the chat from twitch.tv/videos/${id}`);\r\n  }\r\n};\r\nexport const downloadChatJson = async (id) => {\r\n  try {\r\n    return (await axios.get(`/vod/jsonchat/${id}`)).data;\r\n  } catch (err) {\r\n    throw new Error(`Could not get the chat from twitch.tv/videos/${id}`);\r\n  }\r\n};\r\nexport const getHighlights = async (id) => {\r\n  try {\r\n    return (await axios.get(`/vod/highlights/${id}`)).data;\r\n  } catch (err) {\r\n    throw new Error(`Could not get highlights from twitch.tv/videos/${id}.`);\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  Container,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  CssBaseline,\r\n  Grid,\r\n  ListItemIcon,\r\n  Checkbox,\r\n  ListItemText,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { getVodInfo, downloadMetadata } from \"../services/vod\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  vods: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  description: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  errs: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  downloadButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  textField: {\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst LookUp = () => {\r\n  const pastVodData = JSON.parse(window.localStorage.getItem(\"pastVodData\"));\r\n  const classes = useStyles();\r\n  const [urls, setUrls] = React.useState(\"\");\r\n  const [vodData, setVodData] = React.useState(pastVodData || []);\r\n  const [errs, setErrs] = React.useState([]);\r\n  const [checked, setChecked] = React.useState(\r\n    pastVodData ? new Array(pastVodData.length).fill(true) : []\r\n  );\r\n  const [inProgress, setInProgress] = React.useState(false);\r\n  const lookUp = () => {\r\n    setChecked([]);\r\n    setInProgress(true);\r\n    const newVodData = [];\r\n    const newErrs = [];\r\n    new Set(\r\n      urls\r\n        .split(\"\\n\")\r\n        .map((url) => {\r\n          url = url.trim();\r\n          if (!isNaN(url)) return url;\r\n          for (const splitItem of url.split(\"/\")) {\r\n            if (splitItem.trim() !== \"\" && !isNaN(splitItem))\r\n              return splitItem.trim();\r\n          }\r\n          newErrs.push(`Bad format: ${url}`);\r\n          return \"\";\r\n        })\r\n        .filter((id) => id !== \"\")\r\n    ).forEach((id) => {\r\n      newVodData.push(getVodInfo(id).catch((e) => newErrs.push(e.message)));\r\n    });\r\n    Promise.all(newVodData).then((data) => {\r\n      const filteredData = vodData.concat(\r\n        data.filter((item) => item instanceof Object)\r\n      );\r\n      const removedDuplicates = [];\r\n      for (let i = 0; i < filteredData.length; i++) {\r\n        let hasDuplicate = false;\r\n        for (let j = i + 1; j < filteredData.length; j++) {\r\n          if (filteredData[i]._id === filteredData[j]._id) {\r\n            hasDuplicate = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!hasDuplicate) removedDuplicates.push(filteredData[i]);\r\n      }\r\n      setVodData(removedDuplicates);\r\n      window.localStorage.setItem(\r\n        \"pastVodData\",\r\n        JSON.stringify(removedDuplicates)\r\n      );\r\n      setInProgress(false);\r\n      setErrs(newErrs);\r\n      setChecked(new Array(removedDuplicates.length).fill(true));\r\n    });\r\n  };\r\n  const handleCheckbox = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) newChecked.push(value);\r\n    else newChecked.splice(currentIndex, 1);\r\n\r\n    setChecked(newChecked);\r\n  };\r\n  const handleDelete = () => {\r\n    const newVodData = [];\r\n    for (let i = 0; i < vodData.length; i++) {\r\n      if (checked.indexOf(vodData[i]._id) === -1) newVodData.push(vodData[i]);\r\n    }\r\n    setVodData(newVodData);\r\n    setChecked(new Array(newVodData.length).fill(false));\r\n    window.localStorage.setItem(\"pastVodData\", JSON.stringify(newVodData));\r\n  };\r\n  const handleDownload = () => {\r\n    const actualMetadata = [];\r\n    vodData.forEach((val) => {\r\n      if (checked.indexOf(val._id) !== -1) actualMetadata.push(val);\r\n    });\r\n    downloadMetadata(actualMetadata);\r\n  };\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <CssBaseline />\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <Typography\r\n            variant=\"body1\"\r\n            component=\"h3\"\r\n            className={classes.description}\r\n          >\r\n            <b>This is used to get the metadata of twitch vods.</b>\r\n          </Typography>\r\n          <TextField\r\n            multiline\r\n            rowsMax={10}\r\n            rows={4}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            label=\"On each new line, put a twitch vod URL or twitch vod ID.\"\r\n            fullWidth\r\n            className={classes.textField}\r\n            onChange={(e) => setUrls(e.target.value)}\r\n          />\r\n          <Button variant=\"contained\" color=\"primary\" onClick={lookUp}>\r\n            Look up\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>{inProgress && <CircularProgress color=\"secondary\" />}</Grid>\r\n        <Grid item xs={12}>\r\n          {vodData.length !== 0 && (\r\n            <>\r\n              <List className={classes.vods}>\r\n                <ListItem>\r\n                  <ListItemText\r\n                    primary={\r\n                      <Typography>\r\n                        <b>Vods</b>\r\n                      </Typography>\r\n                    }\r\n                  />\r\n                </ListItem>\r\n                {vodData.map((data) => (\r\n                  <ListItem\r\n                    button\r\n                    key={data._id}\r\n                    onClick={handleCheckbox(data._id)}\r\n                  >\r\n                    <ListItemIcon>\r\n                      <Checkbox\r\n                        edge=\"start\"\r\n                        checked={checked.indexOf(data._id) !== -1}\r\n                        tabIndex={-1}\r\n                        disableRipple\r\n                      />\r\n                    </ListItemIcon>\r\n                    <ListItemText>\r\n                      <Typography>\r\n                        <b>{data.channel.display_name}:</b> {data.title}\r\n                      </Typography>\r\n                    </ListItemText>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n              <br />\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleDownload}\r\n                className={classes.downloadButton}\r\n              >\r\n                Download metadata\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={handleDelete}\r\n                color=\"primary\"\r\n              >\r\n                Delete\r\n              </Button>\r\n            </>\r\n          )}\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {errs.length !== 0 && (\r\n            <List className={classes.errs}>\r\n              <ListItem>\r\n                <ListItemText\r\n                  primary={\r\n                    <Typography color=\"error\">\r\n                      <b>Failed to get the following vods</b>\r\n                    </Typography>\r\n                  }\r\n                />\r\n              </ListItem>\r\n              {errs.map((msg) => (\r\n                <ListItem key={msg}>\r\n                  <Typography>{msg}</Typography>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\nexport default LookUp;\r\n","import React from \"react\";\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  Container,\r\n  Button,\r\n  CssBaseline,\r\n  Snackbar,\r\n  Grid,\r\n  List,\r\n  ListItemText,\r\n  ListItem,\r\n  IconButton,\r\n  Select,\r\n  FormControl,\r\n  MenuItem,\r\n  FormHelperText,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { getVodInfo, getQualities, getVods } from \"../services/vod\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  displayVodInfo: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  textField: {\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  description: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  timePicker: {\r\n    cursor: \"default\",\r\n  },\r\n  listItem: {\r\n    padding: 0,\r\n  },\r\n  timeDisplay: {\r\n    width: 30,\r\n    backgroundColor: theme.palette.info.main,\r\n  },\r\n  downloadButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  buttonTimeChange: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  instructionsButton: {\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n}));\r\nconst DownloadVod = () => {\r\n  const oldVodInfo = JSON.parse(window.localStorage.getItem(\"downloadVod\"));\r\n  const defaultVodInfo = {\r\n    vodId: \"\",\r\n    title: \"\",\r\n    author: \"\",\r\n    timeSelected: \"\",\r\n    showInstructions: false,\r\n    filenames: [\"\"],\r\n    allTimes: [[\"00\", \"00\", \"00\", \"00\", \"00\", \"00\"]],\r\n    qualities: [],\r\n    selectedQuality: \"\",\r\n  };\r\n  const classes = useStyles();\r\n  const [url, setUrl] = React.useState(oldVodInfo ? oldVodInfo.vodId : \"\");\r\n  const [vodInfo, setVodInfo] = React.useState(oldVodInfo || defaultVodInfo);\r\n  const [err, setErr] = React.useState(\"\");\r\n  const [inProgress, setInProgress] = React.useState(false);\r\n  const lookUp = () => {\r\n    let id = \"\";\r\n    for (const splitItem of url.trim().split(\"/\"))\r\n      if (splitItem.trim() !== \"\" && !isNaN(splitItem)) id = splitItem.trim();\r\n    if (id === \"\") setErr(\"Input is badly formatted\");\r\n    else {\r\n      setInProgress(true);\r\n      getVodInfo(id)\r\n        .then((data) => {\r\n          getQualities(id)\r\n            .then((qualities) => {\r\n              const copy = {\r\n                ...vodInfo,\r\n                vodId: id,\r\n                title: data.title,\r\n                author: data.channel.display_name,\r\n                qualities: qualities,\r\n                selectedQuality: qualities[0],\r\n              };\r\n              window.localStorage.setItem(\"downloadVod\", JSON.stringify(copy));\r\n              setVodInfo(copy);\r\n            })\r\n            .catch((e) => setErr(`${e.message}`))\r\n            .finally(() => setInProgress(false));\r\n        })\r\n        .catch((e) => setErr(`${e.message}`))\r\n        .finally(() => setInProgress(false));\r\n    }\r\n  };\r\n  const handleDownload = () => {\r\n    const times = vodInfo.allTimes.map((timeArr, index) => {\r\n      const startTime =\r\n        parseInt(timeArr[0]) * 60 * 60 + timeArr[1] * 60 + timeArr[2] * 1;\r\n      const endTime = timeArr[3] * 60 * 60 + timeArr[4] * 60 + timeArr[5] * 1;\r\n      if (vodInfo.filenames[index] === \"\") return { startTime, endTime };\r\n      return {\r\n        startTime,\r\n        endTime,\r\n        filename: vodInfo.filenames[index].replace(/ /g, \"_\") + \".ts\",\r\n      };\r\n    });\r\n    const data = {\r\n      quality: vodInfo.selectedQuality,\r\n      id: vodInfo.vodId,\r\n      times,\r\n    };\r\n    try {\r\n      getVods(data);\r\n    } catch (err) {\r\n      setErr(err.message);\r\n      setVodInfo(defaultVodInfo);\r\n      window.localStorage.setItem(\r\n        \"downloadVod\",\r\n        JSON.stringify(defaultVodInfo)\r\n      );\r\n    }\r\n  };\r\n  const handleAddTime = () => {\r\n    const newInfo = {\r\n      ...vodInfo,\r\n      allTimes: vodInfo.allTimes.concat([[\"00\", \"00\", \"00\", \"00\", \"00\", \"00\"]]),\r\n      filenames: vodInfo.filenames.concat(\"\"),\r\n    };\r\n    setVodInfo(newInfo);\r\n    window.localStorage.setItem(\"downloadVod\", JSON.stringify(newInfo));\r\n  };\r\n  const handleKeyPress = (e) => {\r\n    if (vodInfo.author !== \"\" && vodInfo.timeSelected !== \"\" && !isNaN(e.key)) {\r\n      const currValue =\r\n        vodInfo.allTimes[vodInfo.timeSelected[0]][vodInfo.timeSelected[1]];\r\n      let newValue = \"\";\r\n      let intValue = parseInt(e.key);\r\n      newValue =\r\n        vodInfo.timeSelected[1] === \"0\" || vodInfo.timeSelected[1] === \"3\"\r\n          ? `${currValue[1]}${intValue}`\r\n          : parseInt(currValue[1]) >= 6\r\n          ? `0${intValue}`\r\n          : `${currValue[1]}${intValue}`;\r\n\r\n      const copy = [...vodInfo.allTimes];\r\n      const copy2 = [...copy[vodInfo.timeSelected[0]]];\r\n      copy2[vodInfo.timeSelected[1]] = newValue;\r\n      copy[vodInfo.timeSelected[0]] = copy2;\r\n      const newInfo = { ...vodInfo, allTimes: copy };\r\n      setVodInfo(newInfo);\r\n      window.localStorage.setItem(\"downloadVod\", JSON.stringify(newInfo));\r\n    }\r\n  };\r\n  const handleDelete = (index) => () => {\r\n    if (vodInfo.allTimes.length === 1) return;\r\n    const allTimesCopy = [...vodInfo.allTimes];\r\n    allTimesCopy.splice(index, 1);\r\n    const fileCopy = [...vodInfo.filenames];\r\n    fileCopy.splice(index, 1);\r\n    const newInfo = { ...vodInfo, allTimes: allTimesCopy, filenames: fileCopy };\r\n    setVodInfo(newInfo);\r\n    window.localStorage.setItem(\"downloadVod\", JSON.stringify(newInfo));\r\n  };\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <CssBaseline />\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <Typography\r\n            variant=\"body1\"\r\n            component=\"h3\"\r\n            className={classes.description}\r\n          >\r\n            <b>This is used to downloads twitch vods.</b>\r\n          </Typography>\r\n          <TextField\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            label=\"Enter twitch vod URL or twitch vod ID.\"\r\n            fullWidth\r\n            value={url}\r\n            className={classes.textField}\r\n            onChange={(e) => setUrl(e.target.value)}\r\n          />\r\n          <Button variant=\"contained\" color=\"primary\" onClick={lookUp}>\r\n            Look up\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>{inProgress && <CircularProgress color=\"secondary\" />}</Grid>\r\n        {vodInfo.author !== \"\" && (\r\n          <Grid item xs={12}>\r\n            <div className={classes.displayVodInfo}>\r\n              <Typography component=\"h3\" variant=\"h6\">\r\n                <b>{vodInfo.author}</b>: {vodInfo.title}\r\n              </Typography>\r\n              <br />\r\n              <Button\r\n                className={classes.instructionsButton}\r\n                onClick={() => {\r\n                  setVodInfo({\r\n                    ...vodInfo,\r\n                    showInstructions: !vodInfo.showInstructions,\r\n                  });\r\n                  window.localStorage.setItem(\r\n                    \"downloadVod\",\r\n                    JSON.stringify({\r\n                      ...vodInfo,\r\n                      showInstructions: !vodInfo.showInstructions,\r\n                    })\r\n                  );\r\n                }}\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                tabIndex={-1}\r\n              >\r\n                {vodInfo.showInstructions ? \"Hide\" : \"Show\"} instructions and\r\n                settings\r\n              </Button>\r\n              {vodInfo.showInstructions && (\r\n                <div className={classes.instructions}>\r\n                  <Typography component=\"h3\" variant=\"subtitle1\">\r\n                    Specify the time range of the vod in the format of{\" \"}\r\n                    <b>hours : minutes : seconds</b>.\r\n                  </Typography>\r\n                  <Typography component=\"h3\" variant=\"subtitle1\">\r\n                    Use <b>Tab</b> or <b>click on the specific time cell</b>,\r\n                    then type in the number that you want.\r\n                  </Typography>\r\n                  <Typography component=\"h3\" variant=\"subtitle1\">\r\n                    Hours are limited from 0 to 99, with minutes and seconds\r\n                    being limited from 0 to 59.\r\n                  </Typography>\r\n                  <Typography component=\"h3\" variant=\"subtitle1\">\r\n                    If the time chosen is too long, then it will just go all the\r\n                    way to the end of the vod.\r\n                  </Typography>\r\n                  <br />\r\n                  <FormControl>\r\n                    <Select\r\n                      labelId=\"selectQuality\"\r\n                      value={vodInfo.selectedQuality}\r\n                      onChange={(event) => {\r\n                        setVodInfo({\r\n                          ...vodInfo,\r\n                          selectedQuality: event.target.value,\r\n                        });\r\n                        window.localStorage.setItem(\r\n                          \"downloadVod\",\r\n                          JSON.stringify({\r\n                            ...vodInfo,\r\n                            selectedQuality: event.target.value,\r\n                          })\r\n                        );\r\n                      }}\r\n                    >\r\n                      {vodInfo.qualities.map((name) => (\r\n                        <MenuItem key={name} value={name}>\r\n                          {name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                    <FormHelperText>Video Quality</FormHelperText>\r\n                  </FormControl>\r\n                </div>\r\n              )}\r\n              <div className={classes.timePicker}>\r\n                <List>\r\n                  {new Array(vodInfo.allTimes.length).fill().map((_, index) => {\r\n                    return (\r\n                      <ListItem key={index} className={classes.listItem}>\r\n                        <IconButton\r\n                          fontSize=\"large\"\r\n                          tabIndex={-1}\r\n                          onClick={handleDelete(index)}\r\n                        >\r\n                          <DeleteOutlinedIcon />\r\n                        </IconButton>\r\n\r\n                        <ListItemText\r\n                          primary={\r\n                            <>\r\n                              <Typography component=\"p\" variant=\"h6\">\r\n                                {[0, 1, 2, 3, 4, 5].map((subIndex) => {\r\n                                  return (\r\n                                    <React.Fragment key={`${index}${subIndex}`}>\r\n                                      {subIndex === 0 && \"From \"}\r\n                                      {subIndex === 3 && \" to \"}\r\n                                      <span\r\n                                        onKeyDown={handleKeyPress}\r\n                                        className={\r\n                                          vodInfo.timeSelected ===\r\n                                          `${index}${subIndex}`\r\n                                            ? classes.timeDisplay\r\n                                            : {}\r\n                                        }\r\n                                        onFocus={() =>\r\n                                          setVodInfo({\r\n                                            ...vodInfo,\r\n                                            timeSelected: `${index}${subIndex}`,\r\n                                          })\r\n                                        }\r\n                                        onBlur={() =>\r\n                                          setVodInfo({\r\n                                            ...vodInfo,\r\n                                            timeSelected: \"\",\r\n                                          })\r\n                                        }\r\n                                        tabIndex={index * 6 + subIndex + 1}\r\n                                      >\r\n                                        {vodInfo.allTimes[index][subIndex]}\r\n                                      </span>\r\n                                      {subIndex !== 2 && subIndex !== 5 && \":\"}\r\n                                    </React.Fragment>\r\n                                  );\r\n                                })}\r\n                              </Typography>\r\n                            </>\r\n                          }\r\n                        />\r\n                        <TextField\r\n                          label=\"File name (optional)\"\r\n                          variant=\"outlined\"\r\n                          color=\"secondary\"\r\n                          onChange={(e) => {\r\n                            const copy = [...vodInfo.filenames];\r\n                            copy[index] = e.target.value;\r\n                            setVodInfo({ ...vodInfo, filenames: copy });\r\n                            window.localStorage.setItem(\r\n                              \"downloadVod\",\r\n                              JSON.stringify({ ...vodInfo, filenames: copy })\r\n                            );\r\n                          }}\r\n                          margin=\"dense\"\r\n                          value={vodInfo.filenames[index]}\r\n                        />\r\n                      </ListItem>\r\n                    );\r\n                  })}\r\n                </List>\r\n                <br />\r\n\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleDownload}\r\n                  className={classes.downloadButton}\r\n                  tabIndex={6 * vodInfo.allTimes.length + 2}\r\n                >\r\n                  Download\r\n                </Button>\r\n\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={handleAddTime}\r\n                  color=\"primary\"\r\n                  className={classes.buttonTimeChange}\r\n                  tabIndex={6 * vodInfo.allTimes.length + 3}\r\n                >\r\n                  Add another time range\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n      <Snackbar open={err.length !== 0} onClose={() => setErr(\"\")}>\r\n        <Alert severity=\"error\" onClose={() => setErr(\"\")}>\r\n          {err}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\nexport default DownloadVod;\r\n","import React from \"react\";\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  Container,\r\n  Button,\r\n  CssBaseline,\r\n  Snackbar,\r\n  Grid,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { downloadSimpleChat, downloadChatJson } from \"../services/vod\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  description: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\nconst DownloadChat = () => {\r\n  const classes = useStyles();\r\n  const [url, setUrl] = React.useState(\r\n    window.localStorage.getItem(\"downloadChatId\") || \"\"\r\n  );\r\n  const [err, setErr] = React.useState(\"\");\r\n  const [inProgress, setInProgress] = React.useState(false);\r\n  const getId = () => {\r\n    let id = \"\";\r\n    for (const splitItem of url.trim().split(\"/\"))\r\n      if (splitItem.trim() !== \"\" && !isNaN(splitItem)) id = splitItem.trim();\r\n    if (id === \"\") setErr(\"Input is badly formatted\");\r\n    else {\r\n      window.localStorage.setItem(\"downloadChatId\", id);\r\n      return id;\r\n    }\r\n  };\r\n  const downloadSimple = () => {\r\n    const id = getId();\r\n    if (id) {\r\n      setInProgress(true);\r\n      downloadSimpleChat(id)\r\n        .catch((err) => setErr(err.message))\r\n        .finally(() => setInProgress(false));\r\n    }\r\n  };\r\n  const downloadJson = async () => {\r\n    const id = getId();\r\n    if (id) {\r\n      setInProgress(true);\r\n      downloadChatJson(id)\r\n        .catch((err) => setErr(err.message))\r\n        .finally(() => setInProgress(false));\r\n    }\r\n  };\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <CssBaseline />\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12}>\r\n          <Typography\r\n            variant=\"body1\"\r\n            component=\"h3\"\r\n            className={classes.description}\r\n          >\r\n            <b>This is used to downloads twitch vods.</b>\r\n          </Typography>\r\n          <TextField\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            label=\"Enter twitch vod URL or twitch vod ID.\"\r\n            fullWidth\r\n            value={url}\r\n            onChange={(e) => setUrl(e.target.value)}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={downloadSimple}>\r\n            Download simple chat (text file)\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={downloadJson}>\r\n            Download complicated chat (JSON file)\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {inProgress && <CircularProgress color=\"secondary\" />}\r\n        </Grid>\r\n      </Grid>\r\n      <Snackbar open={err.length !== 0} onClose={() => setErr(\"\")}>\r\n        <Alert severity=\"error\" onClose={() => setErr(\"\")}>\r\n          {err}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\nexport default DownloadChat;\r\n","import React from \"react\";\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  Container,\r\n  Button,\r\n  CssBaseline,\r\n  Snackbar,\r\n  Grid,\r\n  TableHead,\r\n  TableCell,\r\n  Table,\r\n  TableBody,\r\n  TableRow,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { getHighlights } from \"../services/vod\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  description: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\nconst GetHighlights = () => {\r\n  const classes = useStyles();\r\n  const [url, setUrl] = React.useState(\r\n    window.localStorage.getItem(\"getHighlightsId\") || \"\"\r\n  );\r\n  const [err, setErr] = React.useState(\"\");\r\n  const [data, setData] = React.useState(\r\n    window.localStorage.getItem(\"getHighlightsData\")\r\n      ? JSON.parse(window.localStorage.getItem(\"getHighlightsData\"))\r\n      : []\r\n  );\r\n  const [inProgress, setInProgress] = React.useState(false);\r\n\r\n  const getHighlightsHandler = () => {\r\n    let id = \"\";\r\n    for (const splitItem of url.trim().split(\"/\"))\r\n      if (splitItem.trim() !== \"\" && !isNaN(splitItem)) id = splitItem.trim();\r\n    if (id === \"\") setErr(\"Input is badly formatted\");\r\n    else {\r\n      setInProgress(true);\r\n\r\n      getHighlights(id)\r\n        .then((result) => {\r\n          window.localStorage.setItem(\"getHighlightsId\", id);\r\n          window.localStorage.setItem(\r\n            \"getHighlightsData\",\r\n            JSON.stringify(result.topSpeeds)\r\n          );\r\n          setData(result.topSpeeds);\r\n        })\r\n        .catch((err) => setErr(err.message))\r\n        .finally(() => setInProgress(false));\r\n    }\r\n  };\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <CssBaseline />\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12}>\r\n          <Typography\r\n            variant=\"body1\"\r\n            component=\"h3\"\r\n            className={classes.description}\r\n          >\r\n            <b>This is used to downloads twitch vods.</b>\r\n          </Typography>\r\n          <TextField\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            label=\"Enter twitch vod URL or twitch vod ID.\"\r\n            fullWidth\r\n            value={url}\r\n            className={classes.textField}\r\n            onChange={(e) => setUrl(e.target.value)}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={getHighlightsHandler}\r\n            fullWidth\r\n          >\r\n            Get Highlights\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {inProgress && <CircularProgress color=\"secondary\" />}\r\n        </Grid>\r\n      </Grid>\r\n      {!inProgress && data.length !== 0 && (\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Time</TableCell>\r\n              <TableCell>Messages per second</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.map(({ speed, time }, index) => {\r\n              const hours = time / 60 / 60;\r\n              const minutes = (hours - ~~hours) * 60;\r\n              const seconds = (minutes - ~~minutes) * 60;\r\n              return (\r\n                <TableRow key={index}>\r\n                  <TableCell key={index}>{speed}</TableCell>\r\n                  <TableCell>{`${~~hours}h ${~~minutes}m ${~~seconds}s`}</TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      )}\r\n      <Snackbar open={err.length !== 0} onClose={() => setErr(\"\")}>\r\n        <Alert severity=\"error\" onClose={() => setErr(\"\")}>\r\n          {err}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\nexport default GetHighlights;\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nexport default createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    background: {\r\n      default: \"#1C1C1E\",\r\n      paper: \"#2C2C2E\",\r\n    },\r\n    primary: {\r\n      main: \"#512da8\",\r\n    },\r\n    secondary: {\r\n      main: \"#6a1b9a\",\r\n    },\r\n    error: {\r\n      main: \"#b71c1c\",\r\n    },\r\n    info: {\r\n      main: \"#bf360c\",\r\n    },\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport LookUp from \"./components/LookUp\";\r\nimport DownloadVod from \"./components/DownloadVod\";\r\nimport DownloadChat from \"./components/DownloadChat\";\r\nimport GetHighlights from \"./components/GetHighlights\";\r\nimport theme from \"./theme\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { AppBar, Tabs, Tab } from \"@material-ui/core\";\r\nfunction App() {\r\n  const [currTab, setCurrTab] = React.useState(0);\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <AppBar position=\"static\">\r\n        <Tabs\r\n          variant=\"fullWidth\"\r\n          value={currTab}\r\n          onChange={(_, newValue) => setCurrTab(newValue)}\r\n        >\r\n          <Tab label=\"Look Up Vod\" />\r\n          <Tab label=\"Download Vod\" />\r\n          <Tab label=\"Download Chat\" />\r\n          <Tab label=\"Get Highlights\" />\r\n        </Tabs>\r\n      </AppBar>\r\n      {currTab === 0 && <LookUp />}\r\n      {currTab === 1 && <DownloadVod />}\r\n      {currTab === 2 && <DownloadChat />}\r\n      {currTab === 3 && <GetHighlights />}\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}